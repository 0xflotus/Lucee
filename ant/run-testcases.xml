<?xml version="1.0" encoding="UTF-8"?>
<project default="run" basedir="." name="Lucee">


<target name="run">

<echo><![CDATA[
  _____         _   ____            
 |_   _|__  ___| |_| __ )  _____  __
   | |/ _ \/ __| __|  _ \ / _ \ \/ /
   | |  __/\__ \ |_| |_) | (_) >  < 
   |_|\___||___/\__|____/ \___/_/\_\
]]></echo>


	
<script language="CFML">
<![CDATA[
if(execute) {
request.WEBADMINPASSWORD="webweb";

NL="
";
try {
	// set a password for the admin
		try {
		    admin 
				action="updatePassword"
				type="web"
				oldPassword=""
				newPassword="#request.WEBADMINPASSWORD#";
		}
		catch(e){}// may exist from previous execution
		try {
		    admin 
				action="updatePassword"
				type="server"
				oldPassword=""
				newPassword="#request.WEBADMINPASSWORD#";
		}
		catch(e){}// may exist from previous execution

	// create "/test" mapping
		admin 
			action="updateMapping"
			type="web"
			password="#request.WEBADMINPASSWORD#"
			virtual="/test"
			physical="#test#"
			toplevel="true"
			archive=""
			primary="physical"
			trusted="no";


	// set the testbox mapping
 	
		application 
			action="update" 
			componentpaths = "#[{archive:testboxArchive}]#"; 
	
 		// load testbox
 		SystemOut=createObject('java','lucee.commons.lang.SystemOut');
 		out=SystemOut.setOut(nullValue());
 		err=SystemOut.setErr(nullValue());

 		silent {
 		try {
	 		tb=new testbox.system.TestBox(directory={ mapping="/test", recurse=true, filter=function(path){
	 		
//	 		echo(arguments.path&"
//");
			var name=listLast(arguments.path,"\/");
	 		
	 		// get parent
	 		var p=getDirectoryFromPath(arguments.path);
	 		p=left(p,p.len()-1);
	 		p=listTrim(p,"\/");
	 		
	 		// get grand parent
	 		var pp=getDirectoryFromPath(p);
	 		pp=left(pp,pp.len()-1);
	 		pp=listTrim(pp,"\/");
	 		
	 		// only testcases in sub directory of "test" are allowed
	 		var _test=listTrim(test,"\/");
	 		return (_test==pp || _test==p) && left(name,1)!="_";

	 		}},reporter:"console");
	 		// execute
	 		report=tb.run(callbacks:{
	onBundleStart 	= function( cfc, testResults ){
		var meta=getComponentMetadata(cfc);
		SystemOut.setOut(out);
 		SystemOut.setErr(err);

		systemOutput("=============================================================
#meta.name#",true);
		SystemOut.setOut(nullValue());
 		SystemOut.setErr(nullValue());
	}
	,onBundleEnd 	= function( cfc, testResults ){
			
		var bundle=arrayLast(testResults.getBundleStats());
		try {
		SystemOut.setOut(out);
 		SystemOut.setErr(err);

		// we have an error
		if(bundle.totalFail+bundle.totalError>0) {
			systemOutput("	Time: #bundle.totalDuration# ms
	Suites/Specs: #bundle.totalSuites#/#bundle.totalSpecs#
	Pass: #bundle.totalPass#
	Failures: #bundle.totalFail#
	Errors: #bundle.totalError#
	Skipped: #bundle.totalSkipped#  #serialize(bundle)#",true);



		}
		// everything is fine
		else {
			systemOutput("	Time: #bundle.totalDuration# ms",true);
		}




		// exceptions
		if(!isSimpleValue( bundle.globalException )) {
	systemOutput("GLOBAL BUNDLE EXCEPTION
	#bundle.globalException.type#:#bundle.globalException.message#:#bundle.globalException.detail#
=============================================================
STACKTRACE
=============================================================
#bundle.globalException.stacktrace#
=============================================================
END STACKTRACE
=============================================================",true);
		}


//systemOutput("=============================================================",true);
		}
		finally {
			SystemOut.setOut(nullValue());
	 		SystemOut.setErr(nullValue());
		}
		
	}
	/*,onSuiteStart 	= function( bundle, testResults, suite ){}
	,onSuiteEnd		= function( bundle, testResults, suite ){}
	,onSpecStart		= function( bundle, testResults, suite, spec ){}
	,onSpecEnd 		= function( bundle, testResults, suite, spec ){}*/
}); 


	 		// get the result
	 		result=tb.getResult();
 		}
 		finally {
 			//SystemOut.setOut(out);
 			//SystemOut.setErr(err);
 		}
 		}
 		

 		// throw an exception in case not all testcases have passed
 		if(result.getTotalFail()+result.getTotalError()>0) {
 			// output the report
 			//echo(trim(report));

 			throw "testbox could not sucessfull execute all testcases: failed #result.getTotalFail()#;error #result.getTotalError()#";
 		}
 		else {
 			echo("============================================================="&NL);
 			echo("TestBox Version: #tb.getVersion()#"&NL);
 			echo("Global Stats (#result.getTotalDuration()# ms)"&NL);
 			echo("============================================================="&NL);
 			echo("->[Bundles/Suites/Specs: #result.getTotalBundles()#/#result.getTotalSuites()#/#result.getTotalSpecs()#]"&NL);
 			echo("->[Pass: #result.getTotalPass()#]"&NL);
 			echo("->[Failures: #result.getTotalFail()#]"&NL);
 			echo("->[Errors: #result.getTotalError()#]"&NL);
 			echo("->[Skipped: #result.getTotalSkipped()#]"&NL);
 		}
 		
	}
	catch(e){
		echo("-------------------------------------------------------"&NL);
		echo("Testcase failed"&NL);
		echo(e.message&NL);
		echo(serialize(e)&NL);
		echo("-------------------------------------------------------"&NL);
		rethrow;
	}
}
 ]]>
  </script>

</target>
</project>